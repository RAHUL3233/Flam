
#include <iostream>
#include <unordered_map>
using namespace std;

struct Node {
    int key, value;
    Node* prev;
    Node* next;
    Node(int k, int v) {
        key = k;
        value = v;
        prev = next = NULL;
    }
};

class LRUCache {
    int capacity;
    unordered_map<int, Node*> map;
    Node *head, *tail;

    // Remove a node from the list
    void remove(Node* node) {
        if (node->prev) node->prev->next = node->next;
        if (node->next) node->next->prev = node->prev;
    }

    // Insert a node right after head
    void insertToFront(Node* node) {
        node->next = head->next;
        node->prev = head;
        if (head->next) head->next->prev = node;
        head->next = node;
    }

public:
    LRUCache(int cap) {
        capacity = cap;
        head = new Node(0, 0); // dummy head
        tail = new Node(0, 0); // dummy tail
        head->next = tail;
        tail->prev = head;
    }

    int get(int key) {
        if (map.count(key)) {
            Node* node = map[key];
            remove(node);
            insertToFront(node);
            return node->value;
        }
        return -1;
    }

    void put(int key, int value) {
        if (map.count(key)) {
            Node* node = map[key];
            node->value = value;
            remove(node);
            insertToFront(node);
        } else {
            if (map.size() == capacity) {
                Node* lru = tail->prev;
                remove(lru);
                map.erase(lru->key);
                delete lru;
            }
            Node* newNode = new Node(key, value);
            map[key] = newNode;
            insertToFront(newNode);
        }
    }
};



